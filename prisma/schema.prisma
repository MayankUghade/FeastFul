datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  post          Post[]
  like          Like[]
  joinrequest   Joinrequest[]
  notification  Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id            String    @id @default(cuid())
  name          String
  description   String
  location      String
  price         Float?
  time          String
  date          DateTime
  userEmail     String
  image         String?
  user          User      @relation(fields: [userEmail], references: [email], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  likes         Like[]
  joinrequest   Joinrequest?
}

model Like {
  id          String   @id @default(cuid())
  postId      String
  post        Post     @relation(fields: [postId], references: [id])
  userEmail   String
  user        User     @relation(fields: [userEmail], references: [email])

  @@unique([postId, userEmail])
}

model Joinrequest{
  id          String   @id @default(cuid())
  postId      String   @unique
  status      String
  post        Post     @relation(fields: [postId], references: [id])
  userEmail   String   @unique
  user        User     @relation(fields: [userEmail], references: [email])
}

model Notification {
  id         String   @id @default(cuid())
  userEmail  String
  message    String
  status     String   
  timestamp  DateTime @default(now())
  user       User     @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}
